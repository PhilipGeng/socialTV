import sys
import cv2
import numpy as np

"""
This function does background transparency conversion on the avatars generated by expression-transfer.
Basically, look for the outline of the avatar.
Outside of the outline, shift all black pixels to alpha 0
"""
def openFile(image):
    BG_THRESHOLD = 20   # Color of the background. Change to a smaller value if the program is being over-aggressive with the background detection

    #image = cv2.imread(infile, 1);
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    # Thresholding
    # Pixels with greyscale level above BG_THRESHOLD get assigned to 255, 
    # Pixels with greyscale level below BG_THRESHOLD get assigned to 0
    retval, temp = cv2.threshold(gray, BG_THRESHOLD, 255, cv2.THRESH_BINARY)  # make one matrix -- this is for the contour findingx
    retval, alpha = cv2.threshold(gray, BG_THRESHOLD, 255, cv2.THRESH_BINARY) # This is the alpha "mask" that will be eventually combined with the original image

    # Find the contours (the edges of the avatar)
    # http://docs.opencv.org/trunk/doc/py_tutorials/py_imgproc/py_contours/py_contour_features/py_contour_features.html
    # http://docs.opencv.org/trunk/doc/py_tutorials/py_imgproc/py_contours/py_contours_begin/py_contours_begin.html
    contours, hierarchy = cv2.findContours(temp,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)

    # iterate through each contour, find the one with the largest area
    largest_area = 0
    largest_contour = -1
    for i in range(len(contours)):
        a = cv2.contourArea(contours[i])
        if (a > largest_area):
            largest_area=a
            largest_contour_index=i
            
    # Now draw the contours onto the alpha mask. 
    # This is to correct errors from the thresholding step, which may
    # have set black areas *inside* the avatar to 0 (since that step just
    # sets *all* black areas to 0.
    # Fill in the area inside the contours with 255 (maximum non-transparent)
    cv2.drawContours(alpha, contours, largest_contour_index, 255, -1, 8, hierarchy)
    # Now combine the alpha mask with the rgb image
    # First split the original image into rgb (or bgr) channels
    # http://docs.opencv.org/trunk/doc/py_tutorials/py_core/py_basic_ops/py_basic_ops.html
    b,g,r = cv2.split(image)
    # Then re-merge the rgb+alpha channel into a new image
    # http://docs.opencv.org/modules/core/doc/operations_on_arrays.html
    image = cv2.merge((b,g,r,alpha))
    print alpha[100]
    # Optional:
    # Find the bounding box (the smallest rectangle that encloses the avatar),
    # and save only that to a file (so it's smaller)
    x,y,w,h = cv2.boundingRect(contours[0])
    avatar_only = image[y-25:y+h+25, x-25:x+w+25]
    return avatar_only
    # And write it out into a new file. Need to be png (jpeg does not have the alpha channel)
#    cv2.imwrite(outfile, new_img)  # if we want to write the full image
#    cv2.imwrite(outfile, avatar_only)  # only the avatar

